#Get average age as also an independent variable:
AvgMV = read.csv("yearly_updated_data/DE_AvgMV.csv", sep = ";")
AvgMV[,1]=str_replace_all(AvgMV[,1], fixed(" "), "")
rownames(AvgMV)=AvgMV[,1]
AvgMV=AvgMV[,-1]
get_AvgMV=function(playing_stat, AvgMV, year){
HomeTeamAA = rep(0,nrow(playing_stat))
AwayTeamAA = rep(0,nrow(playing_stat))
for (i in 1:nrow(playing_stat)){
ht = playing_stat$HomeTeam[i]
at = playing_stat$AwayTeam[i]
HomeTeamAA[i]=AvgMV[ht,year]
AwayTeamAA[i]=AvgMV[at,year]
}
playing_stat['HomeAvgMV'] = HomeTeamAA
playing_stat['AwayAvgMV'] = AwayTeamAA
return (playing_stat)
}
# not available until 2006
# playing_statistics_1 = get_AvgMV(playing_statistics_1, AvgMV, "X2000")
# playing_statistics_2 = get_AvgMV(playing_statistics_2, AvgMV, "X2001")
# playing_statistics_3 = get_AvgMV(playing_statistics_3, AvgMV, "X2002")
# playing_statistics_4 = get_AvgMV(playing_statistics_4, AvgMV, "X2003")
# playing_statistics_5 = get_AvgMV(playing_statistics_5, AvgMV, "X2004")
# playing_statistics_6 = get_AvgMV(playing_statistics_6, AvgMV, "X2005")
playing_statistics_7 = get_AvgMV(playing_statistics_7, AvgMV, "X2006")
playing_statistics_8 = get_AvgMV(playing_statistics_8, AvgMV, "X2007")
playing_statistics_9 = get_AvgMV(playing_statistics_9, AvgMV, "X2008")
playing_statistics_10 = get_AvgMV(playing_statistics_10, AvgMV, "X2009")
playing_statistics_11 = get_AvgMV(playing_statistics_11, AvgMV, "X2010")
playing_statistics_12 = get_AvgMV(playing_statistics_12, AvgMV, "X2011")
playing_statistics_13 = get_AvgMV(playing_statistics_13, AvgMV, "X2012")
playing_statistics_14 = get_AvgMV(playing_statistics_14, AvgMV, "X2013")
playing_statistics_15 = get_AvgMV(playing_statistics_15, AvgMV, "X2014")
playing_statistics_16 = get_AvgMV(playing_statistics_16, AvgMV, "X2015")
playing_statistics_17 = get_AvgMV(playing_statistics_17, AvgMV, "X2016")
playing_statistics_18 = get_AvgMV(playing_statistics_18, AvgMV, "X2017")
#Get MatchWeek
get_mw=function(playing_stat){
j = 1
MatchWeek = rep(0,nrow(playing_stat))
for (i in 1:nrow(playing_stat)){
MatchWeek[i]=j
if ((i %% (n.clubs/2)) == 0){
j = j + 1
}
}
playing_stat['MW'] = MatchWeek
return(playing_stat)
}
playing_statistics_1 = get_mw(playing_statistics_1)
playing_statistics_2 = get_mw(playing_statistics_2)
# playing_statistics_3 = get_mw(playing_statistics_3)
# playing_statistics_4 = get_mw(playing_statistics_4)
# playing_statistics_5 = get_mw(playing_statistics_5)
# playing_statistics_6 = get_mw(playing_statistics_6)
playing_statistics_7 = get_mw(playing_statistics_7)
playing_statistics_8 = get_mw(playing_statistics_8)
playing_statistics_9 = get_mw(playing_statistics_9)
playing_statistics_10 = get_mw(playing_statistics_10)
playing_statistics_11 = get_mw(playing_statistics_11)
playing_statistics_12 = get_mw(playing_statistics_12)
playing_statistics_13 = get_mw(playing_statistics_13)
playing_statistics_14 = get_mw(playing_statistics_14)
playing_statistics_15 = get_mw(playing_statistics_15)
playing_statistics_16 = get_mw(playing_statistics_16)
playing_statistics_17 = get_mw(playing_statistics_17)
playing_statistics_18 = get_mw(playing_statistics_18)
# Combining to one dataset
playing_stat = rbind(     playing_statistics_7,
playing_statistics_8,
playing_statistics_9,
playing_statistics_10,
playing_statistics_11,
playing_statistics_12,
playing_statistics_13,
playing_statistics_14,
playing_statistics_15,
playing_statistics_16,
playing_statistics_17,
playing_statistics_18)
### Add distance between clubs playing grounds (air distance in km)
distances=read.csv("yearly_updated_data/DE_distances.csv",row.names = 1)
colnames(distances)=str_replace_all(colnames(distances), fixed("."), "")
rownames(distances)=str_replace_all(rownames(distances), fixed(" "), "")
get_distance=function(playing_statd){
Distance = rep(0,nrow(playing_statd))
for (i in 1:nrow(playing_statd)){
ht = playing_statd$HomeTeam[i]
at = playing_statd$AwayTeam[i]
home=which(ht==rownames(distances))
away=which(at==rownames(distances))
Distance[i]=distances[home,away]
}
playing_statd["Distance"] = Distance
return (playing_statd)
}
playing_stat=get_distance(playing_stat)
####################################
# Identify Win/Loss Streaks if any.
get_3game_ws=function(string){
for (i in 1:nrow(string)){
if (string == 9){
return(1)
}else{
return(0)
}
}
}
get_5game_ws=function(string){
if (string == 15){
return(1)
}else{
return(0)
}
}
get_3game_ls=function(string){
if (string == 0){
return(1)
}else{
return(0)
}
}
get_5game_ls=function(string){
if (string == '0'){
return(1)
}else{
return(0)
}
}
playing_stat['HTWinStreak3'] = ifelse(playing_stat["HM3"]==9,1,0)
playing_stat['HTWinStreak5'] = ifelse(playing_stat["HM5"]==15,1,0)
playing_stat['HTLossStreak3'] = ifelse(playing_stat["HM3"]==0,1,0)
playing_stat['HTLossStreak5'] = ifelse(playing_stat["HM5"]==0,1,0)
playing_stat['ATWinStreak3'] = ifelse(playing_stat["AM3"]==9,1,0)
playing_stat['ATWinStreak5'] = ifelse(playing_stat["AM5"]==15,1,0)
playing_stat['ATLossStreak3'] = ifelse(playing_stat["AM3"]==0,1,0)
playing_stat['ATLossStreak5'] = ifelse(playing_stat["AM5"]==0,1,0)
# Get Goal Difference
playing_stat['HTGD'] = playing_stat['HTGS'] - playing_stat['HTGC']
playing_stat['ATGD'] = playing_stat['ATGS'] - playing_stat['ATGC']
# Diff in points
playing_stat['DiffPts'] = playing_stat['HTP'] - playing_stat['ATP']
diff_form=function(playing_stat){
HM5max=apply(cbind(playing_stat['HM5'],playing_stat['HM4'],playing_stat['HM3'],playing_stat['HM2'],playing_stat['HM1']),1,max)
AM5max=apply(cbind(playing_stat['AM5'],playing_stat['AM4'],playing_stat['AM3'],playing_stat['AM2'],playing_stat['AM1']),1,max)
HM5max=as.numeric(HM5max)
AM5max=as.numeric(AM5max)
return(HM5max-AM5max)
}
playing_stat['DiffFormPts'] = diff_form(playing_stat)
# Diff in last year positions
playing_stat['DiffLP'] = playing_stat['HomeTeamLP'] - playing_stat['AwayTeamLP']
# Scale DiffPts , DiffFormPts, HTGD, ATGD by Matchweek.
cols = c('HTGD','ATGD','DiffPts','DiffFormPts','HTP','ATP','HTS','ATS','HTST','ATST')
for (col in cols){
playing_stat[col] = playing_stat[col] / playing_stat$MW
}
write.csv(playing_stat,"DE_final_dataset.csv")
}
DE_preparation(TRUE)
dataf=datac[-c((nrow(datac)-10):nrow(datac)),]
# Separate into feature set and target variable
#FTR = Full Time Result (H=Home Win, D=Draw, A=Away Win)
x_all = dataf[,-which(names(dataf)=='FTR')]
y_all = dataf['FTR']
#Standardising the data
#Center to the mean and component wise scale to unit variance.
cols = c('HTGD','ATGD','HTP','ATP','DiffLP','Distance','AwayAvgAge','HomeAvgAge','HomeAvgMV','AwayAvgMV','HTS','ATS','HTST','ATST')
x_all[cols] = scale(x_all[cols])
#last 3 matches for both sides
x_all$HM3 = ifelse((x_all$HM3-x_all$HM2)==3,"W",ifelse((x_all$HM3-x_all$HM2)==1,"D",ifelse((x_all$HM3-x_all$HM2)==0&x_all$MW>3,"L","NM")))
x_all$HM2 = ifelse((x_all$HM2-x_all$HM1)==3,"W",ifelse((x_all$HM2-x_all$HM1)==1,"D",ifelse((x_all$HM2-x_all$HM1)==0&x_all$MW>2,"L","NM")))
x_all$HM1 = ifelse(x_all$HM1==3,"W",ifelse(x_all$HM1==1,"D",ifelse((x_all$HM1)==0&x_all$MW>1,"L","NM")))
x_all$AM3 = ifelse((x_all$AM3-x_all$AM2)==3,"W",ifelse((x_all$AM3-x_all$AM2)==1,"D",ifelse((x_all$AM3-x_all$AM2)==0&x_all$MW>3,"L","NM")))
x_all$AM2 = ifelse((x_all$AM2-x_all$AM1)==3,"W",ifelse((x_all$AM2-x_all$AM1)==1,"D",ifelse((x_all$AM2-x_all$AM1)==0&x_all$MW>2,"L","NM")))
x_all$AM1 = ifelse(x_all$AM1==3,"W",ifelse(x_all$AM1==1,"D",ifelse((x_all$AM1)==0&x_all$MW>1,"L","NM")))
# Change categorial columns into dummy columns
n <- names(x_all)
f <- as.formula(paste("~ -1 +", paste(n[!n %in% c("X","Date")], collapse = "+")))
A <- model.matrix(f,x_all)
head(A)
A=as.data.frame(A)
A$matchnr.=c(1:nrow(A))
# with interwetten columns
x_featured=A[,c('HTP', 'ATP', 'HM1L', 'HM1W','HM1NM', 'HM2L', 'HM2W','HM2NM',
'AM1L','AM1NM', 'AM1W', 'AM2L', 'AM2W','AM2NM', 'AM3L', 'AM3W','AM3NM', 'HTGD', 'ATGD',
"DiffPts", 'DiffFormPts', 'DiffLP','Distance','AwayAvgAge','HomeAvgAge','HomeAvgMV','AwayAvgMV',
'HTS','ATS','HTST','ATST','IWH','IWD','IWA','matchnr.')]
# x_featured=A[,c('HTP', 'ATP', 'HM1L', 'HM1W','HM1NM', 'HM2L', 'HM2W','HM2NM', 'HM3L', 'HM3W','HM3NM',
#                 'AM1L','AM1NM', 'AM1W', 'AM2L', 'AM2W','AM2NM', 'AM3L', 'AM3W','AM3NM', 'HTGD', 'ATGD',
#                 "DiffPts", 'DiffFormPts', 'DiffLP','Distance','AwayAvgAge','HomeAvgAge','HomeAvgMV','AwayAvgMV',
#                 'HTS','ATS','HTST','ATST')]
df=cbind(x_featured,y_all)
# FTR naar cijfers converteren, beginnend met 0
df$FTRC=ifelse(df$FTR=="H",0,ifelse(df$FTR=="D",1,2))
dat=df[-which(names(df)=="FTR")]
# set seed for reproducibility
set.seed(999)
# Make split index
train_index <- sample(1:nrow(dat), nrow(dat)*0.75)
# Full data set
data_variables <- as.matrix(dat[,-which(names(dat) %in% c("FTRC",'IWH','IWD','IWA','matchnr.'))]) # putting 'IWH','IWD','IWA' in the "FTRC" vector to work with interwetten odds
odds=dat[train_index,c('IWH','IWD','IWA')]
matchnr.=dat[train_index,c('matchnr.')]
data_label <- dat[,"FTRC"]
data_matrix <- xgb.DMatrix(data = as.matrix(dat), label = data_label)
# split train data and make xgb.DMatrix
train_data   <- data_variables[train_index,]
train_label  <- data_label[train_index]
train_matrix <- xgb.DMatrix(data = train_data, label = train_label)
# split test data and make xgb.DMatrix
test_data  <- data_variables[-train_index,]
test_label <- data_label[-train_index]
test_matrix <- xgb.DMatrix(data = test_data, label = test_label)
numberOfClasses <- length(unique(dat$FTRC))
xgb_params <- list("max_depth"=3,"eta"=0.2,
"colsample_bytree"=0.9,
"objective" = "multi:softprob",
"eval_metric" = "mlogloss",
"min_child_weight"=7,
"subsample"=0.8,
"alpha"=0,
"lambda"=1,
"num_class" = numberOfClasses)
nround    <- 20 # number of XGBoost rounds
cv.nfold  <- 10
# Fit cv.nfold * cv.nround XGB models and save OOF predictions
cv_model <- xgb.cv(params = xgb_params,
data = train_matrix,
nrounds = nround,
nfold = cv.nfold,
verbose = TRUE,
prediction = TRUE)
OOF_prediction <- data.frame(cv_model$pred) %>%
mutate(max_prob = max.col(., ties.method = "last"),
label = train_label + 1)
head(OOF_prediction)
## checking if profit would be made with certain strategy
pred.and.odds=cbind(OOF_prediction,odds,matchnr.)
pred.and.odds$H=pred.and.odds$X1*pred.and.odds$IWH
pred.and.odds$D=pred.and.odds$X2*pred.and.odds$IWD
pred.and.odds$A=pred.and.odds$X3*pred.and.odds$IWA
pred.and.odds$beton=max.col(pred.and.odds[,c("H","D","A")])
pred.and.odds$maxprof=apply(pred.and.odds[,c("H","D","A")], 1, max)
for (i in 1:nrow(pred.and.odds)){
pred.and.odds$bet.prob[i] = pred.and.odds[i,pred.and.odds$beton[i]]
}
nround    <- 40 # number of XGBoost rounds
cv.nfold  <- 10
cv_model <- xgb.cv(params = xgb_params,
data = train_matrix,
nrounds = nround,
nfold = cv.nfold,
verbose = TRUE,
prediction = TRUE)
nround    <- 25 # number of XGBoost rounds
cv.nfold  <- 10
cv_model <- xgb.cv(params = xgb_params,
data = train_matrix,
nrounds = nround,
nfold = cv.nfold,
verbose = TRUE,
prediction = TRUE)
set.seed(999)
# Make split index
train_index <- sample(1:nrow(dat), nrow(dat)*0.75)
# Full data set
data_variables <- as.matrix(dat[,-which(names(dat) %in% c("FTRC",'IWH','IWD','IWA','matchnr.'))]) # putting 'IWH','IWD','IWA' in the "FTRC" vector to work with interwetten odds
odds=dat[train_index,c('IWH','IWD','IWA')]
matchnr.=dat[train_index,c('matchnr.')]
data_label <- dat[,"FTRC"]
data_matrix <- xgb.DMatrix(data = as.matrix(dat), label = data_label)
# split train data and make xgb.DMatrix
train_data   <- data_variables[train_index,]
train_label  <- data_label[train_index]
train_matrix <- xgb.DMatrix(data = train_data, label = train_label)
# split test data and make xgb.DMatrix
test_data  <- data_variables[-train_index,]
test_label <- data_label[-train_index]
test_matrix <- xgb.DMatrix(data = test_data, label = test_label)
numberOfClasses <- length(unique(dat$FTRC))
xgb_params <- list("max_depth"=3,"eta"=0.2,
"colsample_bytree"=0.9,
"objective" = "multi:softprob",
"eval_metric" = "mlogloss",
"min_child_weight"=7,
"subsample"=0.8,
"alpha"=0,
"lambda"=1,
"num_class" = numberOfClasses)
nround    <- 25 # number of XGBoost rounds
cv.nfold  <- 10
# Fit cv.nfold * cv.nround XGB models and save OOF predictions
cv_model <- xgb.cv(params = xgb_params,
data = train_matrix,
nrounds = nround,
nfold = cv.nfold,
verbose = TRUE,
prediction = TRUE)
nround    <- 25 # number of XGBoost rounds
cv.nfold  <- 10
cv_model <- xgb.cv(params = xgb_params,
data = train_matrix,
nrounds = nround,
nfold = cv.nfold,
verbose = TRUE,
prediction = TRUE)
nround    <- 22 # number of XGBoost rounds
cv.nfold  <- 10
cv_model <- xgb.cv(params = xgb_params,
data = train_matrix,
nrounds = nround,
nfold = cv.nfold,
verbose = TRUE,
prediction = TRUE)
OOF_prediction <- data.frame(cv_model$pred) %>%
mutate(max_prob = max.col(., ties.method = "last"),
label = train_label + 1)
head(OOF_prediction)
pred.and.odds=cbind(OOF_prediction,odds,matchnr.)
pred.and.odds$H=pred.and.odds$X1*pred.and.odds$IWH
pred.and.odds$D=pred.and.odds$X2*pred.and.odds$IWD
pred.and.odds$A=pred.and.odds$X3*pred.and.odds$IWA
pred.and.odds$beton=max.col(pred.and.odds[,c("H","D","A")])
pred.and.odds$maxprof=apply(pred.and.odds[,c("H","D","A")], 1, max)
for (i in 1:nrow(pred.and.odds)){
pred.and.odds$bet.prob[i] = pred.and.odds[i,pred.and.odds$beton[i]]
}
calc_prof <- function(minprofmarg,maxprofmarg,minprob,maxprob,wager,n.periods){
gamesbetted=pred.and.odds[(pred.and.odds$maxprof>minprofmarg)&(pred.and.odds$maxprof<maxprofmarg)&(pred.and.odds$bet.prob>minprob)&(pred.and.odds$bet.prob<maxprob),]
gamescorrect=gamesbetted[gamesbetted$beton==gamesbetted$label,]
oddsmatrix=gamescorrect[,c('IWH','IWD','IWA')]
perperiod=matrix(rep(0,n.periods*6),nrow=n.periods)
period.size=ceiling(max(gamesbetted$matchnr.)/n.periods)
revenue=rep(0,nrow(gamescorrect))
for (i in 1:nrow(gamescorrect)){
revenue[i]=oddsmatrix[i,gamescorrect$beton[i]]
}
profit1=(sum(revenue)-nrow(gamesbetted))*wager
profitperc1=(sum(revenue)/nrow(gamesbetted)-1)*100
profit_x_odd=length(revenue)*wager-sum(wager/(gamesbetted$maxprof/gamesbetted$bet.prob))
profitperc_x_odd=((length(revenue)*wager)/sum(wager/(gamesbetted$maxprof/gamesbetted$bet.prob))-1)*100
profit_x_odd.profmarg=sum(wager*gamescorrect$bet.prob*revenue)-sum(wager*gamesbetted$bet.prob)
profitperc_x_odd.profmarg=(sum(wager*gamescorrect$bet.prob*revenue)/sum(wager*gamesbetted$bet.prob)-1)*100
for (i in 1:n.periods){
perperiod[i,1]=i
perperiod[i,2]=nrow(gamescorrect[gamescorrect$matchnr.>((i-1)*period.size)&gamescorrect$matchnr.<((i*period.size)+1),])
perperiod[i,3]=nrow(gamesbetted[gamesbetted$matchnr.>((i-1)*period.size)&gamesbetted$matchnr.<((i*period.size)+1),])
perperiod[i,4]=nrow(pred.and.odds[pred.and.odds$matchnr.>((i-1)*period.size)&pred.and.odds$matchnr.<((i*period.size)+1),])
oddsmatrix=gamescorrect[gamescorrect$matchnr.>((i-1)*period.size)&gamescorrect$matchnr.<((i*period.size)+1),c('IWH','IWD','IWA','beton')]
period.revenue=rep(0,perperiod[i,2])
for (r in 1:perperiod[i,2]){
period.revenue[r]=oddsmatrix[r,oddsmatrix$beton[r]]
}
perperiod[i,5]=(sum(period.revenue)/perperiod[i,3]-1)*100
perperiod[i,6]=(sum(period.revenue)-perperiod[i,3])*wager
}
colnames(perperiod)=c("Period","Won","Placed","Total","Profit (%)","Profit ($)")
return(list(cat("Betting summary\n",
"Bets won/placed: \t",nrow(gamescorrect),"/",nrow(gamesbetted),"\t",round(nrow(gamescorrect)/nrow(gamesbetted),digits = 2), "\n",
"Of total matches: \t",nrow(pred.and.odds),"\n\n",
"For different wager tactics\n",
"Profit percentage: \t",round(profitperc1,digits = 2),"%\n",
"Profit total: \t\t" ,profit1,"\n\n",
"(wager/odd):\n",
"Profit percentage \t",round(profitperc_x_odd,digits = 2),"%\n",
"Profit total \t\t",profit_x_odd,"\n\n",
"(wager/odd * profmarg)\n",
"Profit percentage\t",round(profitperc_x_odd.profmarg,digits = 2),"%\n",
"Profit total\t\t",profit_x_odd.profmarg),
as.data.frame(perperiod)))
}
calc_prof(minprofmarg=1.1,maxprofmarg=1.6,minprob=0.5,maxprob=0.70,wager=1,n.periods=9)
calc_prof(minprofmarg=1.1,maxprofmarg=1.6,minprob=0.3,maxprob=0.70,wager=1,n.periods=9)
calc_prof(minprofmarg=1.1,maxprofmarg=1.6,minprob=0.5,maxprob=0.70,wager=1,n.periods=9)
calc_prof(minprofmarg=1.1,maxprofmarg=1.6,minprob=0.4,maxprob=0.70,wager=1,n.periods=9)
calc_prof(minprofmarg=1.1,maxprofmarg=1.6,minprob=0.35,maxprob=0.90,wager=1,n.periods=9)
calc_prof(minprofmarg=1.1,maxprofmarg=1.6,minprob=0.35,maxprob=0.90,wager=1,n.periods=18)
check_prob -> function(LB,UB){
preds=OOF_prediction
preds$high.prob=apply(preds[,c(1:3)],1,max)
part.preds=preds[preds$high.prob>LB&preds$high.prob<UB,]
fraction.correct=sum(part.preds$max_prob==part.preds$label)/nrow(part.preds)
return(cat("For predictions with probability between ",100*LB,"% and ",100*UB,"%\n",
"the fraction that is correctly predicted is ",100*fraction.correct,"%",sep = ""))
}
check_prob <- function(LB,UB){
preds=OOF_prediction
preds$high.prob=apply(preds[,c(1:3)],1,max)
part.preds=preds[preds$high.prob>LB&preds$high.prob<UB,]
fraction.correct=sum(part.preds$max_prob==part.preds$label)/nrow(part.preds)
return(cat("For predictions with probability between ",100*LB,"% and ",100*UB,"%\n",
"the fraction that is correctly predicted is ",100*fraction.correct,"%",sep = ""))
}
check_prob(0.5,0.6)
check_prob(0.55,0.6)
check_prob(0.55,0.7)
check_prob(0.3,0.4)
check_prob(0.34,0.4)
check_prob(0.34,0.7)
check_prob(0.44,0.7)
check_prob(0.5,0.7)
check_prob(0.5,0.55)
check_prob <- function(LB,UB){
preds=OOF_prediction
preds$high.prob=apply(preds[,c(1:3)],1,max)
part.preds=preds[preds$high.prob>LB&preds$high.prob<UB,]
fraction.correct=sum(part.preds$max_prob==part.preds$label)/nrow(part.preds)
return(cat("For predictions with probability between ",100*LB,"% and ",100*UB,"%\n",
"the fraction that is correctly predicted is ",round(100*fraction.correct,digits = 2),"%",sep = ""))
}
check_prob(0.5,0.55)
seq(0.3,0.01,0.95)
seq(4,2,1)
seq(0.3,0.95,by=0.01)
check_prob <- function(LB,UB){
preds=OOF_prediction
preds$high.prob=apply(preds[,c(1:3)],1,max)
part.preds=preds[preds$high.prob>LB&preds$high.prob<UB,]
fraction.correct=sum(part.preds$max_prob==part.preds$label)/nrow(part.preds)
return(list(cat("For predictions with probability between ",100*LB,"% and ",100*UB,"%\n",
"the fraction that is correctly predicted is ",round(100*fraction.correct,digits = 2),"%",sep = ""),
fraction.correct))
}
check_prob(0.5,0.55)[[2]]
ab=check_prob(0.5,0.55)[[2]]
ab
ab=check_prob(0.5,0.55)[[2]]
ab=seq(0.3,0.95,by=0.01)
total.ab=cbind(rep(0,length(ab)),ab)
for (p in 1:length(ab)){
total.ab[2,p]=check_prob(ab[p],ab[p]+0.05)[[2]]
}
p
ab[p]
total.ab
ab=seq(0.3,0.95,by=0.01)
total.ab=cbind(rep(0,length(ab)),ab)
for (p in 1:length(ab)){
total.ab[p,2]=check_prob(ab[p],ab[p]+0.05)[[2]]
}
plot(total.ab[,1],total.ab[,2])
total.ab
ab=seq(0.3,0.95,by=0.01)
length(ab)
ab=seq(0.3,0.95,by=0.01)
total.ab=cbind(ab,ab)
for (p in 1:length(ab)){
total.ab[p,2]=check_prob(ab[p],ab[p]+0.05)[[2]]
}
plot(total.ab[1,],total.ab[,2])
plot(total.ab[,1],total.ab[,2])
ab=seq(0.3,0.85,by=0.01)
total.ab=cbind(ab,ab)
for (p in 1:length(ab)){
total.ab[p,2]=check_prob(ab[p],ab[p]+0.05)[[2]]
}
plot(total.ab[,1],total.ab[,2])
plot(total.ab[,1]+0.025,total.ab[,2])
idx=as.character(na.omit(factor(OOF_prediction$max_prob)))
realx=as.character(na.omit(factor(OOF_prediction$label)))
confusionMatrix(realx, idx)
bst_model <- xgb.train(params = xgb_params,
data = train_matrix,
nrounds = nround)
test_pred <- predict(bst_model, newdata = test_matrix)
test_prediction <- matrix(test_pred, nrow = numberOfClasses,
ncol=length(test_pred)/numberOfClasses) %>%
t() %>%
data.frame() %>%
mutate(label = test_label + 1,
max_prob = max.col(., "last"))
confusionMatrix(test_prediction$label,
test_prediction$max_prob)
importance_matrix = xgb.importance(feature_names = names(x_featured), model = bst_model)
head(importance_matrix)
gp = xgb.plot.importance(importance_matrix)
cv.nfold  <- 20
cv_model <- xgb.cv(params = xgb_params,
data = train_matrix,
nrounds = nround,
nfold = cv.nfold,
verbose = TRUE,
prediction = TRUE)
nround    <- 22 # number of XGBoost rounds
cv.nfold  <- 20
cv_model <- xgb.cv(params = xgb_params,
data = train_matrix,
nrounds = nround,
nfold = cv.nfold,
verbose = TRUE,
prediction = TRUE)
calc_prof(minprofmarg=1.1,maxprofmarg=1.6,minprob=0.35,maxprob=0.90,wager=1,n.periods=18)
calc_prof(minprofmarg=1.1,maxprofmarg=1.6,minprob=0.45,maxprob=0.90,wager=1,n.periods=18)
calc_prof(minprofmarg=1.1,maxprofmarg=1.5,minprob=0.45,maxprob=0.90,wager=1,n.periods=18)
calc_prof(minprofmarg=1.1,maxprofmarg=1.5,minprob=0.5,maxprob=0.90,wager=1,n.periods=18)
calc_prof(minprofmarg=1.1,maxprofmarg=1.5,minprob=0.5,maxprob=0.55,wager=1,n.periods=18)
calc_prof(minprofmarg=1.1,maxprofmarg=1.5,minprob=0.35,maxprob=0.55,wager=1,n.periods=18)
calc_prof(minprofmarg=1.1,maxprofmarg=1.5,minprob=0.35,maxprob=0.67,wager=1,n.periods=18)
calc_prof(minprofmarg=1.1,maxprofmarg=1.5,minprob=0.33,maxprob=0.67,wager=1,n.periods=18)
calc_prof(minprofmarg=1.1,maxprofmarg=1.5,minprob=0.33,maxprob=0.8,wager=1,n.periods=18)
calc_prof(minprofmarg=1.1,maxprofmarg=1.5,minprob=0.45,maxprob=0.8,wager=1,n.periods=18)
calc_prof(minprofmarg=1.1,maxprofmarg=1.7,minprob=0.45,maxprob=0.8,wager=1,n.periods=18)
calc_prof(minprofmarg=1.1,maxprofmarg=1.7,minprob=0.45,maxprob=0.8,wager=1,n.periods=10)
calc_prof(minprofmarg=1.1,maxprofmarg=1.7,minprob=0.45,maxprob=0.9,wager=1,n.periods=10)
calc_prof(minprofmarg=1.1,maxprofmarg=1.7,minprob=0.45,maxprob=0.99,wager=1,n.periods=10)
calc_prof(minprofmarg=1.1,maxprofmarg=1.7,minprob=0.4,maxprob=0.99,wager=1,n.periods=10)
calc_prof(minprofmarg=1.1,maxprofmarg=1.7,minprob=0.35,maxprob=0.99,wager=1,n.periods=10)
calc_prof(minprofmarg=1.1,maxprofmarg=1.7,minprob=0.4,maxprob=0.99,wager=1,n.periods=10)
calc_prof(minprofmarg=1.1,maxprofmarg=1.7,minprob=0.45,maxprob=0.99,wager=1,n.periods=10)
calc_prof(minprofmarg=1.1,maxprofmarg=1.7,minprob=0.4,maxprob=0.99,wager=1,n.periods=10)
